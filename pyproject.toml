[build-system]
requires = ["setuptools>=68.0"]
build-backend = "setuptools.build_meta"

[project]
name = "collectorium"
version = "1.0.0-beta"
description = "Türkiye'nin ilk niş koleksiyon pazar yeri"
readme = "README.md"
requires-python = ">=3.11"
license = {text = "MIT"}
authors = [
    {name = "Collectorium Team", email = "info@collectorium.com"}
]
keywords = ["django", "marketplace", "ecommerce", "collectibles"]
classifiers = [
    "Development Status :: 4 - Beta",
    "Framework :: Django :: 5.2",
    "Intended Audience :: Developers",
    "License :: OSI Approved :: MIT License",
    "Programming Language :: Python :: 3.11",
]

dependencies = [
    "Django==5.2.*",
    "django-allauth==65.*",
    "django-htmx==1.26.*",
    "django-debug-toolbar==6.*",
    "whitenoise==6.*",
    "dj-database-url==3.*",
    "Pillow==11.*",
    "requests>=2,<3",
    "requests-oauthlib==2.*",
    "PyJWT[crypto]>=2.8",
    "google-auth==2.*",
    "python-dotenv==1.0.0",
    "gunicorn>=22.0.0",
    "psycopg2-binary>=2.9.9",
]

[project.optional-dependencies]
dev = [
    "black>=24.0.0",
    "ruff>=0.3.0",
    "isort>=5.13.0",
    "pytest>=8.0.0",
    "pytest-django>=4.8.0",
    "pytest-cov>=4.1.0",
    "pytest-xdist>=3.5.0",
    "faker>=24.0.0",
    "factory-boy>=3.3.0",
    "django-silk>=5.1.0",
]
test = [
    "pytest>=8.0.0",
    "pytest-django>=4.8.0",
    "pytest-cov>=4.1.0",
    "locust>=2.24.0",
    "playwright>=1.42.0",
]
lint = [
    "black>=24.0.0",
    "ruff>=0.3.0",
    "isort>=5.13.0",
    "pre-commit>=3.6.0",
]

[project.urls]
Homepage = "https://collectorium.com"
Documentation = "https://docs.collectorium.com"
Repository = "https://github.com/yourusername/collectorium"
Issues = "https://github.com/yourusername/collectorium/issues"

[tool.setuptools.packages.find]
where = ["."]
include = ["accounts*", "stores*", "listings*", "catalog*", "cart*", "orders*", "reviews*", "core*"]
exclude = ["tests*", "docs*"]

[tool.black]
line-length = 88
target-version = ['py311']
include = '\.pyi?$'
extend-exclude = '''
/(
  \.eggs
  | \.git
  | \.hg
  | \.mypy_cache
  | \.tox
  | \.venv
  | venv
  | build
  | dist
  | migrations
)/
'''

[tool.isort]
profile = "black"
multi_line_output = 3
line_length = 88
known_django = "django"
sections = ["FUTURE", "STDLIB", "DJANGO", "THIRDPARTY", "FIRSTPARTY", "LOCALFOLDER"]
skip_glob = ["*/migrations/*", "*/staticfiles/*"]

[tool.ruff]
line-length = 88
target-version = "py311"
exclude = [
    ".git",
    "__pycache__",
    "*/migrations/*",
    "*/venv/*",
    "venv",
    "*/staticfiles/*",
    "build",
    "dist",
]

[tool.ruff.lint]
select = [
    "E",   # pycodestyle errors
    "W",   # pycodestyle warnings
    "F",   # pyflakes
    "I",   # isort
    "C90", # mccabe complexity
    "DJ",  # django-specific rules
]
ignore = [
    "E501", # line too long (handled by black)
    "E203", # whitespace before ':'
]

[tool.pytest.ini_options]
DJANGO_SETTINGS_MODULE = "collectorium.settings.dev"
python_files = ["test_*.py", "*_test.py"]
python_classes = ["Test*"]
python_functions = ["test_*"]
testpaths = ["tests"]
addopts = [
    "--strict-markers",
    "--cov=.",
    "--cov-report=term-missing",
    "--cov-report=html",
    "--cov-report=xml",
    "-v",
]
markers = [
    "slow: marks tests as slow (deselect with '-m \"not slow\"')",
    "integration: marks tests as integration tests",
    "e2e: marks tests as end-to-end tests",
]

[tool.coverage.run]
source = ["."]
omit = [
    "*/migrations/*",
    "*/tests/*",
    "*/venv/*",
    "venv/*",
    "manage.py",
    "*/wsgi.py",
    "*/asgi.py",
    "*/settings/*",
]

[tool.coverage.report]
exclude_lines = [
    "pragma: no cover",
    "def __repr__",
    "raise AssertionError",
    "raise NotImplementedError",
    "if __name__ == .__main__.:",
    "if TYPE_CHECKING:",
]






